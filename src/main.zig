//! By convention, main.zig is where your main function lives in the case that
//! you are building an executable. If you are making a library, the convention
//! is to delete this file and start with root.zig instead.


//t:  100010001010001110100
//b:  100101101000011100000
//x:  000111100010010010100 t xor b 
//r:  100111101010011110100 x | b
//t:  100000001000001100000 t & b
const std = @import("std");

// memory allocation can fail, so the return type is !void
pub fn main() !void {
   var map: [10]u128 = .{0} ** 10;
    map[0] =0b0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;   
    map[1] =0b0000000000100000000000000000000000000000000000010000000100000000000000000000000000000000000000000000000000000000000000000000000;   
    map[2] =0b0000101000011000011000010010000010000010000010000100000000000000000000001000000000000100000000000000000000000000000000000000000;   
    map[3] =0b0000000000000000000010100100000001000000100000000000000000100000000001000000000000000000000000000000000000000000000000000000000;   
    map[4] =0b0000001000000001000010010011100000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;   
    map[5] =0b0000000000000000000010000100000000000000100000000000001000000000000000000000000000000000000000000000000000000000000000000000000;   
    map[6] =0b0000000010000010000000000100000000000000000000000000000000000000000000000000100000000001000000000000000000000000000000000000000;   
    map[7] =0b0000000100000000010000000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000;   
    map[8] =0b0000000000000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000;   
    map[9] =0b0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;   
    var turns: i32 = 100;
    for(map) |line| print(line);
    while(turns > 0) : (turns-=1)
    {
        var lineIdx: usize = 9;
        while(lineIdx > 0) : (lineIdx-=1){

            // check falling straight down
            const top = map[lineIdx-1];
            const bottom = map[lineIdx];

            map[lineIdx-1] = top & bottom;
            map[lineIdx] = (top ^ bottom) | bottom;
        } 
    }
    for(map) |line| print(line);
}
fn print(line: u128) void
{
    comptime var i: u7 = 127;
    inline while (i > 0) : (i-=1) {
        const bit: u32 = if((line >> i) % 2 == 1) 1 else 0;
        std.debug.print("{any}", .{bit});
    }
    std.debug.print("\n", .{});
}

